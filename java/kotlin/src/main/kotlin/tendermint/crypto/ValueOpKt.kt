//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: tendermint/crypto/proof.proto

package tendermint.crypto;

@kotlin.jvm.JvmSynthetic
inline fun valueOp(block: tendermint.crypto.ValueOpKt.Dsl.() -> Unit): tendermint.crypto.ProofOuterClass.ValueOp =
  tendermint.crypto.ValueOpKt.Dsl._create(tendermint.crypto.ProofOuterClass.ValueOp.newBuilder()).apply { block() }._build()
object ValueOpKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: tendermint.crypto.ProofOuterClass.ValueOp.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: tendermint.crypto.ProofOuterClass.ValueOp.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): tendermint.crypto.ProofOuterClass.ValueOp = _builder.build()

    /**
     * <pre>
     * Encoded in ProofOp.Key.
     * </pre>
     *
     * <code>bytes key = 1;</code>
     */
    var key: com.google.protobuf.ByteString
      @JvmName("getKey")
      get() = _builder.getKey()
      @JvmName("setKey")
      set(value) {
        _builder.setKey(value)
      }
    /**
     * <pre>
     * Encoded in ProofOp.Key.
     * </pre>
     *
     * <code>bytes key = 1;</code>
     */
    fun clearKey() {
      _builder.clearKey()
    }

    /**
     * <pre>
     * To encode in ProofOp.Data
     * </pre>
     *
     * <code>.tendermint.crypto.Proof proof = 2;</code>
     */
    var proof: tendermint.crypto.ProofOuterClass.Proof
      @JvmName("getProof")
      get() = _builder.getProof()
      @JvmName("setProof")
      set(value) {
        _builder.setProof(value)
      }
    /**
     * <pre>
     * To encode in ProofOp.Data
     * </pre>
     *
     * <code>.tendermint.crypto.Proof proof = 2;</code>
     */
    fun clearProof() {
      _builder.clearProof()
    }
    /**
     * <pre>
     * To encode in ProofOp.Data
     * </pre>
     *
     * <code>.tendermint.crypto.Proof proof = 2;</code>
     * @return Whether the proof field is set.
     */
    fun hasProof(): kotlin.Boolean {
      return _builder.hasProof()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun tendermint.crypto.ProofOuterClass.ValueOp.copy(block: tendermint.crypto.ValueOpKt.Dsl.() -> Unit): tendermint.crypto.ProofOuterClass.ValueOp =
  tendermint.crypto.ValueOpKt.Dsl._create(this.toBuilder()).apply { block() }._build()
