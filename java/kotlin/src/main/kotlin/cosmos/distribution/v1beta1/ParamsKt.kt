//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/distribution/v1beta1/distribution.proto

package cosmos.distribution.v1beta1;

@kotlin.jvm.JvmSynthetic
inline fun params(block: cosmos.distribution.v1beta1.ParamsKt.Dsl.() -> Unit): cosmos.distribution.v1beta1.Distribution.Params =
  cosmos.distribution.v1beta1.ParamsKt.Dsl._create(cosmos.distribution.v1beta1.Distribution.Params.newBuilder()).apply { block() }._build()
object ParamsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: cosmos.distribution.v1beta1.Distribution.Params.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.distribution.v1beta1.Distribution.Params.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.distribution.v1beta1.Distribution.Params = _builder.build()

    /**
     * <code>string community_tax = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"community_tax&#92;""];</code>
     */
    var communityTax: kotlin.String
      @JvmName("getCommunityTax")
      get() = _builder.getCommunityTax()
      @JvmName("setCommunityTax")
      set(value) {
        _builder.setCommunityTax(value)
      }
    /**
     * <code>string community_tax = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"community_tax&#92;""];</code>
     */
    fun clearCommunityTax() {
      _builder.clearCommunityTax()
    }

    /**
     * <code>string base_proposer_reward = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"base_proposer_reward&#92;""];</code>
     */
    var baseProposerReward: kotlin.String
      @JvmName("getBaseProposerReward")
      get() = _builder.getBaseProposerReward()
      @JvmName("setBaseProposerReward")
      set(value) {
        _builder.setBaseProposerReward(value)
      }
    /**
     * <code>string base_proposer_reward = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"base_proposer_reward&#92;""];</code>
     */
    fun clearBaseProposerReward() {
      _builder.clearBaseProposerReward()
    }

    /**
     * <code>string bonus_proposer_reward = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"bonus_proposer_reward&#92;""];</code>
     */
    var bonusProposerReward: kotlin.String
      @JvmName("getBonusProposerReward")
      get() = _builder.getBonusProposerReward()
      @JvmName("setBonusProposerReward")
      set(value) {
        _builder.setBonusProposerReward(value)
      }
    /**
     * <code>string bonus_proposer_reward = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"bonus_proposer_reward&#92;""];</code>
     */
    fun clearBonusProposerReward() {
      _builder.clearBonusProposerReward()
    }

    /**
     * <code>bool withdraw_addr_enabled = 4 [(.gogoproto.moretags) = "yaml:&#92;"withdraw_addr_enabled&#92;""];</code>
     */
    var withdrawAddrEnabled: kotlin.Boolean
      @JvmName("getWithdrawAddrEnabled")
      get() = _builder.getWithdrawAddrEnabled()
      @JvmName("setWithdrawAddrEnabled")
      set(value) {
        _builder.setWithdrawAddrEnabled(value)
      }
    /**
     * <code>bool withdraw_addr_enabled = 4 [(.gogoproto.moretags) = "yaml:&#92;"withdraw_addr_enabled&#92;""];</code>
     */
    fun clearWithdrawAddrEnabled() {
      _builder.clearWithdrawAddrEnabled()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun cosmos.distribution.v1beta1.Distribution.Params.copy(block: cosmos.distribution.v1beta1.ParamsKt.Dsl.() -> Unit): cosmos.distribution.v1beta1.Distribution.Params =
  cosmos.distribution.v1beta1.ParamsKt.Dsl._create(this.toBuilder()).apply { block() }._build()
