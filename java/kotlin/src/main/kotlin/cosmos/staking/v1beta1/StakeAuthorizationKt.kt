//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/staking/v1beta1/authz.proto

package cosmos.staking.v1beta1;

@kotlin.jvm.JvmSynthetic
inline fun stakeAuthorization(block: cosmos.staking.v1beta1.StakeAuthorizationKt.Dsl.() -> Unit): cosmos.staking.v1beta1.Authz.StakeAuthorization =
  cosmos.staking.v1beta1.StakeAuthorizationKt.Dsl._create(cosmos.staking.v1beta1.Authz.StakeAuthorization.newBuilder()).apply { block() }._build()
object StakeAuthorizationKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: cosmos.staking.v1beta1.Authz.StakeAuthorization.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.staking.v1beta1.Authz.StakeAuthorization.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.staking.v1beta1.Authz.StakeAuthorization = _builder.build()

    /**
     * <pre>
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     * </pre>
     *
     * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [(.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
     */
    var maxTokens: cosmos.base.v1beta1.CoinOuterClass.Coin
      @JvmName("getMaxTokens")
      get() = _builder.getMaxTokens()
      @JvmName("setMaxTokens")
      set(value) {
        _builder.setMaxTokens(value)
      }
    /**
     * <pre>
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     * </pre>
     *
     * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [(.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
     */
    fun clearMaxTokens() {
      _builder.clearMaxTokens()
    }
    /**
     * <pre>
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     * </pre>
     *
     * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [(.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
     * @return Whether the maxTokens field is set.
     */
    fun hasMaxTokens(): kotlin.Boolean {
      return _builder.hasMaxTokens()
    }

    /**
     * <pre>
     * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     * account.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;</code>
     */
    var allowList: cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators
      @JvmName("getAllowList")
      get() = _builder.getAllowList()
      @JvmName("setAllowList")
      set(value) {
        _builder.setAllowList(value)
      }
    /**
     * <pre>
     * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     * account.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;</code>
     */
    fun clearAllowList() {
      _builder.clearAllowList()
    }
    /**
     * <pre>
     * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     * account.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;</code>
     * @return Whether the allowList field is set.
     */
    fun hasAllowList(): kotlin.Boolean {
      return _builder.hasAllowList()
    }

    /**
     * <pre>
     * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;</code>
     */
    var denyList: cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators
      @JvmName("getDenyList")
      get() = _builder.getDenyList()
      @JvmName("setDenyList")
      set(value) {
        _builder.setDenyList(value)
      }
    /**
     * <pre>
     * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;</code>
     */
    fun clearDenyList() {
      _builder.clearDenyList()
    }
    /**
     * <pre>
     * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;</code>
     * @return Whether the denyList field is set.
     */
    fun hasDenyList(): kotlin.Boolean {
      return _builder.hasDenyList()
    }

    /**
     * <pre>
     * authorization_type defines one of AuthorizationType.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4;</code>
     */
    var authorizationType: cosmos.staking.v1beta1.Authz.AuthorizationType
      @JvmName("getAuthorizationType")
      get() = _builder.getAuthorizationType()
      @JvmName("setAuthorizationType")
      set(value) {
        _builder.setAuthorizationType(value)
      }
    /**
     * <pre>
     * authorization_type defines one of AuthorizationType.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4;</code>
     */
    fun clearAuthorizationType() {
      _builder.clearAuthorizationType()
    }
    val validatorsCase: cosmos.staking.v1beta1.Authz.StakeAuthorization.ValidatorsCase
      @JvmName("getValidatorsCase")
      get() = _builder.getValidatorsCase()

    fun clearValidators() {
      _builder.clearValidators()
    }
  }
  @kotlin.jvm.JvmSynthetic
  inline fun validators(block: cosmos.staking.v1beta1.StakeAuthorizationKt.ValidatorsKt.Dsl.() -> Unit): cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators =
    cosmos.staking.v1beta1.StakeAuthorizationKt.ValidatorsKt.Dsl._create(cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.newBuilder()).apply { block() }._build()
  object ValidatorsKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      @kotlin.jvm.JvmField private val _builder: cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators = _builder.build()

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class AddressProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <code>repeated string address = 1;</code>
       * @return A list containing the address.
       */
      val address: com.google.protobuf.kotlin.DslList<kotlin.String, AddressProxy>
        @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getAddressList()
        )
      /**
       * <code>repeated string address = 1;</code>
       * @param value The address to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAddress")
      fun com.google.protobuf.kotlin.DslList<kotlin.String, AddressProxy>.add(value: kotlin.String) {
        _builder.addAddress(value)
      }
      /**
       * <code>repeated string address = 1;</code>
       * @param value The address to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAddress")
      operator fun com.google.protobuf.kotlin.DslList<kotlin.String, AddressProxy>.plusAssign(value: kotlin.String) {
        _builder.addAddress(value)
      }
      /**
       * <code>repeated string address = 1;</code>
       * @param values The address to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllAddress")
      fun com.google.protobuf.kotlin.DslList<kotlin.String, AddressProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
        _builder.addAllAddress(values)
      }
      /**
       * <code>repeated string address = 1;</code>
       * @param values The address to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllAddress")
      operator fun com.google.protobuf.kotlin.DslList<kotlin.String, AddressProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
        _builder.addAllAddress(values)
      }
      /**
       * <code>repeated string address = 1;</code>
       * @param index The index to set the value at.
       * @param value The address to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setAddress")
      operator fun com.google.protobuf.kotlin.DslList<kotlin.String, AddressProxy>.set(index: kotlin.Int, value: kotlin.String) {
        _builder.setAddress(index, value)
      }/**
       * <code>repeated string address = 1;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearAddress")
      fun com.google.protobuf.kotlin.DslList<kotlin.String, AddressProxy>.clear() {
        _builder.clearAddress()
      }}
  }
}
@kotlin.jvm.JvmSynthetic
inline fun cosmos.staking.v1beta1.Authz.StakeAuthorization.copy(block: cosmos.staking.v1beta1.StakeAuthorizationKt.Dsl.() -> Unit): cosmos.staking.v1beta1.Authz.StakeAuthorization =
  cosmos.staking.v1beta1.StakeAuthorizationKt.Dsl._create(this.toBuilder()).apply { block() }._build()
@kotlin.jvm.JvmSynthetic
inline fun cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.copy(block: cosmos.staking.v1beta1.StakeAuthorizationKt.ValidatorsKt.Dsl.() -> Unit): cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators =
  cosmos.staking.v1beta1.StakeAuthorizationKt.ValidatorsKt.Dsl._create(this.toBuilder()).apply { block() }._build()
