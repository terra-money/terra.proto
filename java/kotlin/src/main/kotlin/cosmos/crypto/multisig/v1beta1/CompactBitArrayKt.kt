//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/crypto/multisig/v1beta1/multisig.proto

package cosmos.crypto.multisig.v1beta1;

@kotlin.jvm.JvmSynthetic
inline fun compactBitArray(block: cosmos.crypto.multisig.v1beta1.CompactBitArrayKt.Dsl.() -> Unit): cosmos.crypto.multisig.v1beta1.Multisig.CompactBitArray =
  cosmos.crypto.multisig.v1beta1.CompactBitArrayKt.Dsl._create(cosmos.crypto.multisig.v1beta1.Multisig.CompactBitArray.newBuilder()).apply { block() }._build()
object CompactBitArrayKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: cosmos.crypto.multisig.v1beta1.Multisig.CompactBitArray.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.crypto.multisig.v1beta1.Multisig.CompactBitArray.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.crypto.multisig.v1beta1.Multisig.CompactBitArray = _builder.build()

    /**
     * <code>uint32 extra_bits_stored = 1;</code>
     */
    var extraBitsStored: kotlin.Int
      @JvmName("getExtraBitsStored")
      get() = _builder.getExtraBitsStored()
      @JvmName("setExtraBitsStored")
      set(value) {
        _builder.setExtraBitsStored(value)
      }
    /**
     * <code>uint32 extra_bits_stored = 1;</code>
     */
    fun clearExtraBitsStored() {
      _builder.clearExtraBitsStored()
    }

    /**
     * <code>bytes elems = 2;</code>
     */
    var elems: com.google.protobuf.ByteString
      @JvmName("getElems")
      get() = _builder.getElems()
      @JvmName("setElems")
      set(value) {
        _builder.setElems(value)
      }
    /**
     * <code>bytes elems = 2;</code>
     */
    fun clearElems() {
      _builder.clearElems()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun cosmos.crypto.multisig.v1beta1.Multisig.CompactBitArray.copy(block: cosmos.crypto.multisig.v1beta1.CompactBitArrayKt.Dsl.() -> Unit): cosmos.crypto.multisig.v1beta1.Multisig.CompactBitArray =
  cosmos.crypto.multisig.v1beta1.CompactBitArrayKt.Dsl._create(this.toBuilder()).apply { block() }._build()
