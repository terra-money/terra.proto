//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/base/store/v1beta1/commit_info.proto

package cosmos.base.store.v1beta1;

@kotlin.jvm.JvmSynthetic
inline fun storeInfo(block: cosmos.base.store.v1beta1.StoreInfoKt.Dsl.() -> Unit): cosmos.base.store.v1beta1.CommitInfoOuterClass.StoreInfo =
  cosmos.base.store.v1beta1.StoreInfoKt.Dsl._create(cosmos.base.store.v1beta1.CommitInfoOuterClass.StoreInfo.newBuilder()).apply { block() }._build()
object StoreInfoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: cosmos.base.store.v1beta1.CommitInfoOuterClass.StoreInfo.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.base.store.v1beta1.CommitInfoOuterClass.StoreInfo.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.base.store.v1beta1.CommitInfoOuterClass.StoreInfo = _builder.build()

    /**
     * <code>string name = 1;</code>
     */
    var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <code>string name = 1;</code>
     */
    fun clearName() {
      _builder.clearName()
    }

    /**
     * <code>.cosmos.base.store.v1beta1.CommitID commit_id = 2 [(.gogoproto.nullable) = false];</code>
     */
    var commitId: cosmos.base.store.v1beta1.CommitInfoOuterClass.CommitID
      @JvmName("getCommitId")
      get() = _builder.getCommitId()
      @JvmName("setCommitId")
      set(value) {
        _builder.setCommitId(value)
      }
    /**
     * <code>.cosmos.base.store.v1beta1.CommitID commit_id = 2 [(.gogoproto.nullable) = false];</code>
     */
    fun clearCommitId() {
      _builder.clearCommitId()
    }
    /**
     * <code>.cosmos.base.store.v1beta1.CommitID commit_id = 2 [(.gogoproto.nullable) = false];</code>
     * @return Whether the commitId field is set.
     */
    fun hasCommitId(): kotlin.Boolean {
      return _builder.hasCommitId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun cosmos.base.store.v1beta1.CommitInfoOuterClass.StoreInfo.copy(block: cosmos.base.store.v1beta1.StoreInfoKt.Dsl.() -> Unit): cosmos.base.store.v1beta1.CommitInfoOuterClass.StoreInfo =
  cosmos.base.store.v1beta1.StoreInfoKt.Dsl._create(this.toBuilder()).apply { block() }._build()
