//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/base/abci/v1beta1/abci.proto

package cosmos.base.abci.v1beta1;

@kotlin.jvm.JvmSynthetic
inline fun txMsgData(block: cosmos.base.abci.v1beta1.TxMsgDataKt.Dsl.() -> Unit): cosmos.base.abci.v1beta1.Abci.TxMsgData =
  cosmos.base.abci.v1beta1.TxMsgDataKt.Dsl._create(cosmos.base.abci.v1beta1.Abci.TxMsgData.newBuilder()).apply { block() }._build()
object TxMsgDataKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: cosmos.base.abci.v1beta1.Abci.TxMsgData.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.base.abci.v1beta1.Abci.TxMsgData.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.base.abci.v1beta1.Abci.TxMsgData = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class DataProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated .cosmos.base.abci.v1beta1.MsgData data = 1;</code>
     */
     val data: com.google.protobuf.kotlin.DslList<cosmos.base.abci.v1beta1.Abci.MsgData, DataProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getDataList()
      )
    /**
     * <code>repeated .cosmos.base.abci.v1beta1.MsgData data = 1;</code>
     * @param value The data to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addData")
    fun com.google.protobuf.kotlin.DslList<cosmos.base.abci.v1beta1.Abci.MsgData, DataProxy>.add(value: cosmos.base.abci.v1beta1.Abci.MsgData) {
      _builder.addData(value)
    }/**
     * <code>repeated .cosmos.base.abci.v1beta1.MsgData data = 1;</code>
     * @param value The data to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignData")
    inline operator fun com.google.protobuf.kotlin.DslList<cosmos.base.abci.v1beta1.Abci.MsgData, DataProxy>.plusAssign(value: cosmos.base.abci.v1beta1.Abci.MsgData) {
      add(value)
    }/**
     * <code>repeated .cosmos.base.abci.v1beta1.MsgData data = 1;</code>
     * @param values The data to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllData")
    fun com.google.protobuf.kotlin.DslList<cosmos.base.abci.v1beta1.Abci.MsgData, DataProxy>.addAll(values: kotlin.collections.Iterable<cosmos.base.abci.v1beta1.Abci.MsgData>) {
      _builder.addAllData(values)
    }/**
     * <code>repeated .cosmos.base.abci.v1beta1.MsgData data = 1;</code>
     * @param values The data to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllData")
    inline operator fun com.google.protobuf.kotlin.DslList<cosmos.base.abci.v1beta1.Abci.MsgData, DataProxy>.plusAssign(values: kotlin.collections.Iterable<cosmos.base.abci.v1beta1.Abci.MsgData>) {
      addAll(values)
    }/**
     * <code>repeated .cosmos.base.abci.v1beta1.MsgData data = 1;</code>
     * @param index The index to set the value at.
     * @param value The data to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setData")
    operator fun com.google.protobuf.kotlin.DslList<cosmos.base.abci.v1beta1.Abci.MsgData, DataProxy>.set(index: kotlin.Int, value: cosmos.base.abci.v1beta1.Abci.MsgData) {
      _builder.setData(index, value)
    }/**
     * <code>repeated .cosmos.base.abci.v1beta1.MsgData data = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearData")
    fun com.google.protobuf.kotlin.DslList<cosmos.base.abci.v1beta1.Abci.MsgData, DataProxy>.clear() {
      _builder.clearData()
    }}
}
@kotlin.jvm.JvmSynthetic
inline fun cosmos.base.abci.v1beta1.Abci.TxMsgData.copy(block: cosmos.base.abci.v1beta1.TxMsgDataKt.Dsl.() -> Unit): cosmos.base.abci.v1beta1.Abci.TxMsgData =
  cosmos.base.abci.v1beta1.TxMsgDataKt.Dsl._create(this.toBuilder()).apply { block() }._build()
