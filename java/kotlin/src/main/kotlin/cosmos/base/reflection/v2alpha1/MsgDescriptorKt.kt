//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/base/reflection/v2alpha1/reflection.proto

package cosmos.base.reflection.v2alpha1;

@kotlin.jvm.JvmSynthetic
inline fun msgDescriptor(block: cosmos.base.reflection.v2alpha1.MsgDescriptorKt.Dsl.() -> Unit): cosmos.base.reflection.v2alpha1.Reflection.MsgDescriptor =
  cosmos.base.reflection.v2alpha1.MsgDescriptorKt.Dsl._create(cosmos.base.reflection.v2alpha1.Reflection.MsgDescriptor.newBuilder()).apply { block() }._build()
object MsgDescriptorKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: cosmos.base.reflection.v2alpha1.Reflection.MsgDescriptor.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.base.reflection.v2alpha1.Reflection.MsgDescriptor.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.base.reflection.v2alpha1.Reflection.MsgDescriptor = _builder.build()

    /**
     * <pre>
     * msg_type_url contains the TypeURL of a sdk.Msg.
     * </pre>
     *
     * <code>string msg_type_url = 1;</code>
     */
    var msgTypeUrl: kotlin.String
      @JvmName("getMsgTypeUrl")
      get() = _builder.getMsgTypeUrl()
      @JvmName("setMsgTypeUrl")
      set(value) {
        _builder.setMsgTypeUrl(value)
      }
    /**
     * <pre>
     * msg_type_url contains the TypeURL of a sdk.Msg.
     * </pre>
     *
     * <code>string msg_type_url = 1;</code>
     */
    fun clearMsgTypeUrl() {
      _builder.clearMsgTypeUrl()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun cosmos.base.reflection.v2alpha1.Reflection.MsgDescriptor.copy(block: cosmos.base.reflection.v2alpha1.MsgDescriptorKt.Dsl.() -> Unit): cosmos.base.reflection.v2alpha1.Reflection.MsgDescriptor =
  cosmos.base.reflection.v2alpha1.MsgDescriptorKt.Dsl._create(this.toBuilder()).apply { block() }._build()
