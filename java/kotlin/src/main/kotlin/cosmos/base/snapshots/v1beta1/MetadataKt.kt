//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/base/snapshots/v1beta1/snapshot.proto

package cosmos.base.snapshots.v1beta1;

@kotlin.jvm.JvmSynthetic
inline fun metadata(block: cosmos.base.snapshots.v1beta1.MetadataKt.Dsl.() -> Unit): cosmos.base.snapshots.v1beta1.SnapshotOuterClass.Metadata =
  cosmos.base.snapshots.v1beta1.MetadataKt.Dsl._create(cosmos.base.snapshots.v1beta1.SnapshotOuterClass.Metadata.newBuilder()).apply { block() }._build()
object MetadataKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: cosmos.base.snapshots.v1beta1.SnapshotOuterClass.Metadata.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.base.snapshots.v1beta1.SnapshotOuterClass.Metadata.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.base.snapshots.v1beta1.SnapshotOuterClass.Metadata = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class ChunkHashesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * SHA-256 chunk hashes
     * </pre>
     *
     * <code>repeated bytes chunk_hashes = 1;</code>
     */
     val chunkHashes: com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, ChunkHashesProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getChunkHashesList()
      )
    /**
     * <pre>
     * SHA-256 chunk hashes
     * </pre>
     *
     * <code>repeated bytes chunk_hashes = 1;</code>
     * @param value The chunkHashes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addChunkHashes")
    fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, ChunkHashesProxy>.add(value: com.google.protobuf.ByteString) {
      _builder.addChunkHashes(value)
    }/**
     * <pre>
     * SHA-256 chunk hashes
     * </pre>
     *
     * <code>repeated bytes chunk_hashes = 1;</code>
     * @param value The chunkHashes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignChunkHashes")
    inline operator fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, ChunkHashesProxy>.plusAssign(value: com.google.protobuf.ByteString) {
      add(value)
    }/**
     * <pre>
     * SHA-256 chunk hashes
     * </pre>
     *
     * <code>repeated bytes chunk_hashes = 1;</code>
     * @param values The chunkHashes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllChunkHashes")
    fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, ChunkHashesProxy>.addAll(values: kotlin.collections.Iterable<com.google.protobuf.ByteString>) {
      _builder.addAllChunkHashes(values)
    }/**
     * <pre>
     * SHA-256 chunk hashes
     * </pre>
     *
     * <code>repeated bytes chunk_hashes = 1;</code>
     * @param values The chunkHashes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllChunkHashes")
    inline operator fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, ChunkHashesProxy>.plusAssign(values: kotlin.collections.Iterable<com.google.protobuf.ByteString>) {
      addAll(values)
    }/**
     * <pre>
     * SHA-256 chunk hashes
     * </pre>
     *
     * <code>repeated bytes chunk_hashes = 1;</code>
     * @param index The index to set the value at.
     * @param value The chunkHashes to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setChunkHashes")
    operator fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, ChunkHashesProxy>.set(index: kotlin.Int, value: com.google.protobuf.ByteString) {
      _builder.setChunkHashes(index, value)
    }/**
     * <pre>
     * SHA-256 chunk hashes
     * </pre>
     *
     * <code>repeated bytes chunk_hashes = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearChunkHashes")
    fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, ChunkHashesProxy>.clear() {
      _builder.clearChunkHashes()
    }}
}
@kotlin.jvm.JvmSynthetic
inline fun cosmos.base.snapshots.v1beta1.SnapshotOuterClass.Metadata.copy(block: cosmos.base.snapshots.v1beta1.MetadataKt.Dsl.() -> Unit): cosmos.base.snapshots.v1beta1.SnapshotOuterClass.Metadata =
  cosmos.base.snapshots.v1beta1.MetadataKt.Dsl._create(this.toBuilder()).apply { block() }._build()
