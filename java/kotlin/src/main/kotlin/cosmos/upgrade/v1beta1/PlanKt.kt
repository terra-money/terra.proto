//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/upgrade/v1beta1/upgrade.proto

package cosmos.upgrade.v1beta1;

@kotlin.jvm.JvmSynthetic
inline fun plan(block: cosmos.upgrade.v1beta1.PlanKt.Dsl.() -> Unit): cosmos.upgrade.v1beta1.Upgrade.Plan =
  cosmos.upgrade.v1beta1.PlanKt.Dsl._create(cosmos.upgrade.v1beta1.Upgrade.Plan.newBuilder()).apply { block() }._build()
object PlanKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: cosmos.upgrade.v1beta1.Upgrade.Plan.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.upgrade.v1beta1.Upgrade.Plan.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.upgrade.v1beta1.Upgrade.Plan = _builder.build()

    /**
     * <pre>
     * Sets the name for the upgrade. This name will be used by the upgraded
     * version of the software to apply any special "on-upgrade" commands during
     * the first BeginBlock method after the upgrade is applied. It is also used
     * to detect whether a software version can handle a given upgrade. If no
     * upgrade handler with this name has been set in the software, it will be
     * assumed that the software is out-of-date when the upgrade Time or Height is
     * reached and the software will exit.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <pre>
     * Sets the name for the upgrade. This name will be used by the upgraded
     * version of the software to apply any special "on-upgrade" commands during
     * the first BeginBlock method after the upgrade is applied. It is also used
     * to detect whether a software version can handle a given upgrade. If no
     * upgrade handler with this name has been set in the software, it will be
     * assumed that the software is out-of-date when the upgrade Time or Height is
     * reached and the software will exit.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    fun clearName() {
      _builder.clearName()
    }

    /**
     * <pre>
     * Deprecated: Time based upgrades have been deprecated. Time based upgrade logic
     * has been removed from the SDK.
     * If this field is not empty, an error will be thrown.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 2 [deprecated = true, (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];</code>
     */
    @kotlin.Deprecated(message = "Field time is deprecated") var time: com.google.protobuf.Timestamp
      @JvmName("getTime")
      get() = _builder.getTime()
      @JvmName("setTime")
      set(value) {
        _builder.setTime(value)
      }
    /**
     * <pre>
     * Deprecated: Time based upgrades have been deprecated. Time based upgrade logic
     * has been removed from the SDK.
     * If this field is not empty, an error will be thrown.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 2 [deprecated = true, (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];</code>
     */
    fun clearTime() {
      _builder.clearTime()
    }
    /**
     * <pre>
     * Deprecated: Time based upgrades have been deprecated. Time based upgrade logic
     * has been removed from the SDK.
     * If this field is not empty, an error will be thrown.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 2 [deprecated = true, (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];</code>
     * @return Whether the time field is set.
     */
    fun hasTime(): kotlin.Boolean {
      return _builder.hasTime()
    }

    /**
     * <pre>
     * The height at which the upgrade must be performed.
     * Only used if Time is not set.
     * </pre>
     *
     * <code>int64 height = 3;</code>
     */
    var height: kotlin.Long
      @JvmName("getHeight")
      get() = _builder.getHeight()
      @JvmName("setHeight")
      set(value) {
        _builder.setHeight(value)
      }
    /**
     * <pre>
     * The height at which the upgrade must be performed.
     * Only used if Time is not set.
     * </pre>
     *
     * <code>int64 height = 3;</code>
     */
    fun clearHeight() {
      _builder.clearHeight()
    }

    /**
     * <pre>
     * Any application specific upgrade info to be included on-chain
     * such as a git commit that validators could automatically upgrade to
     * </pre>
     *
     * <code>string info = 4;</code>
     */
    var info: kotlin.String
      @JvmName("getInfo")
      get() = _builder.getInfo()
      @JvmName("setInfo")
      set(value) {
        _builder.setInfo(value)
      }
    /**
     * <pre>
     * Any application specific upgrade info to be included on-chain
     * such as a git commit that validators could automatically upgrade to
     * </pre>
     *
     * <code>string info = 4;</code>
     */
    fun clearInfo() {
      _builder.clearInfo()
    }

    /**
     * <pre>
     * Deprecated: UpgradedClientState field has been deprecated. IBC upgrade logic has been
     * moved to the IBC module in the sub module 02-client.
     * If this field is not empty, an error will be thrown.
     * </pre>
     *
     * <code>.google.protobuf.Any upgraded_client_state = 5 [deprecated = true, (.gogoproto.moretags) = "yaml:&#92;"upgraded_client_state&#92;""];</code>
     */
    @kotlin.Deprecated(message = "Field upgradedClientState is deprecated") var upgradedClientState: com.google.protobuf.Any
      @JvmName("getUpgradedClientState")
      get() = _builder.getUpgradedClientState()
      @JvmName("setUpgradedClientState")
      set(value) {
        _builder.setUpgradedClientState(value)
      }
    /**
     * <pre>
     * Deprecated: UpgradedClientState field has been deprecated. IBC upgrade logic has been
     * moved to the IBC module in the sub module 02-client.
     * If this field is not empty, an error will be thrown.
     * </pre>
     *
     * <code>.google.protobuf.Any upgraded_client_state = 5 [deprecated = true, (.gogoproto.moretags) = "yaml:&#92;"upgraded_client_state&#92;""];</code>
     */
    fun clearUpgradedClientState() {
      _builder.clearUpgradedClientState()
    }
    /**
     * <pre>
     * Deprecated: UpgradedClientState field has been deprecated. IBC upgrade logic has been
     * moved to the IBC module in the sub module 02-client.
     * If this field is not empty, an error will be thrown.
     * </pre>
     *
     * <code>.google.protobuf.Any upgraded_client_state = 5 [deprecated = true, (.gogoproto.moretags) = "yaml:&#92;"upgraded_client_state&#92;""];</code>
     * @return Whether the upgradedClientState field is set.
     */
    fun hasUpgradedClientState(): kotlin.Boolean {
      return _builder.hasUpgradedClientState()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun cosmos.upgrade.v1beta1.Upgrade.Plan.copy(block: cosmos.upgrade.v1beta1.PlanKt.Dsl.() -> Unit): cosmos.upgrade.v1beta1.Upgrade.Plan =
  cosmos.upgrade.v1beta1.PlanKt.Dsl._create(this.toBuilder()).apply { block() }._build()
