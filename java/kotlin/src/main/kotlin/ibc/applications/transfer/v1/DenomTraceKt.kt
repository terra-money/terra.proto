//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: ibc/applications/transfer/v1/transfer.proto

package ibc.applications.transfer.v1;

@kotlin.jvm.JvmSynthetic
inline fun denomTrace(block: ibc.applications.transfer.v1.DenomTraceKt.Dsl.() -> Unit): ibc.applications.transfer.v1.Transfer.DenomTrace =
  ibc.applications.transfer.v1.DenomTraceKt.Dsl._create(ibc.applications.transfer.v1.Transfer.DenomTrace.newBuilder()).apply { block() }._build()
object DenomTraceKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: ibc.applications.transfer.v1.Transfer.DenomTrace.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ibc.applications.transfer.v1.Transfer.DenomTrace.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ibc.applications.transfer.v1.Transfer.DenomTrace = _builder.build()

    /**
     * <pre>
     * path defines the chain of port/channel identifiers used for tracing the
     * source of the fungible token.
     * </pre>
     *
     * <code>string path = 1;</code>
     */
    var path: kotlin.String
      @JvmName("getPath")
      get() = _builder.getPath()
      @JvmName("setPath")
      set(value) {
        _builder.setPath(value)
      }
    /**
     * <pre>
     * path defines the chain of port/channel identifiers used for tracing the
     * source of the fungible token.
     * </pre>
     *
     * <code>string path = 1;</code>
     */
    fun clearPath() {
      _builder.clearPath()
    }

    /**
     * <pre>
     * base denomination of the relayed fungible token.
     * </pre>
     *
     * <code>string base_denom = 2;</code>
     */
    var baseDenom: kotlin.String
      @JvmName("getBaseDenom")
      get() = _builder.getBaseDenom()
      @JvmName("setBaseDenom")
      set(value) {
        _builder.setBaseDenom(value)
      }
    /**
     * <pre>
     * base denomination of the relayed fungible token.
     * </pre>
     *
     * <code>string base_denom = 2;</code>
     */
    fun clearBaseDenom() {
      _builder.clearBaseDenom()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun ibc.applications.transfer.v1.Transfer.DenomTrace.copy(block: ibc.applications.transfer.v1.DenomTraceKt.Dsl.() -> Unit): ibc.applications.transfer.v1.Transfer.DenomTrace =
  ibc.applications.transfer.v1.DenomTraceKt.Dsl._create(this.toBuilder()).apply { block() }._build()
