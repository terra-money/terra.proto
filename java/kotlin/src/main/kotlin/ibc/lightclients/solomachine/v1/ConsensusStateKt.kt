//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: ibc/lightclients/solomachine/v1/solomachine.proto

package ibc.lightclients.solomachine.v1;

@kotlin.jvm.JvmSynthetic
inline fun consensusState(block: ibc.lightclients.solomachine.v1.ConsensusStateKt.Dsl.() -> Unit): ibc.lightclients.solomachine.v1.Solomachine.ConsensusState =
  ibc.lightclients.solomachine.v1.ConsensusStateKt.Dsl._create(ibc.lightclients.solomachine.v1.Solomachine.ConsensusState.newBuilder()).apply { block() }._build()
object ConsensusStateKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: ibc.lightclients.solomachine.v1.Solomachine.ConsensusState.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ibc.lightclients.solomachine.v1.Solomachine.ConsensusState.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ibc.lightclients.solomachine.v1.Solomachine.ConsensusState = _builder.build()

    /**
     * <pre>
     * public key of the solo machine
     * </pre>
     *
     * <code>.google.protobuf.Any public_key = 1 [(.gogoproto.moretags) = "yaml:&#92;"public_key&#92;""];</code>
     */
    var publicKey: com.google.protobuf.Any
      @JvmName("getPublicKey")
      get() = _builder.getPublicKey()
      @JvmName("setPublicKey")
      set(value) {
        _builder.setPublicKey(value)
      }
    /**
     * <pre>
     * public key of the solo machine
     * </pre>
     *
     * <code>.google.protobuf.Any public_key = 1 [(.gogoproto.moretags) = "yaml:&#92;"public_key&#92;""];</code>
     */
    fun clearPublicKey() {
      _builder.clearPublicKey()
    }
    /**
     * <pre>
     * public key of the solo machine
     * </pre>
     *
     * <code>.google.protobuf.Any public_key = 1 [(.gogoproto.moretags) = "yaml:&#92;"public_key&#92;""];</code>
     * @return Whether the publicKey field is set.
     */
    fun hasPublicKey(): kotlin.Boolean {
      return _builder.hasPublicKey()
    }

    /**
     * <pre>
     * diversifier allows the same public key to be re-used across different solo
     * machine clients (potentially on different chains) without being considered
     * misbehaviour.
     * </pre>
     *
     * <code>string diversifier = 2;</code>
     */
    var diversifier: kotlin.String
      @JvmName("getDiversifier")
      get() = _builder.getDiversifier()
      @JvmName("setDiversifier")
      set(value) {
        _builder.setDiversifier(value)
      }
    /**
     * <pre>
     * diversifier allows the same public key to be re-used across different solo
     * machine clients (potentially on different chains) without being considered
     * misbehaviour.
     * </pre>
     *
     * <code>string diversifier = 2;</code>
     */
    fun clearDiversifier() {
      _builder.clearDiversifier()
    }

    /**
     * <code>uint64 timestamp = 3;</code>
     */
    var timestamp: kotlin.Long
      @JvmName("getTimestamp")
      get() = _builder.getTimestamp()
      @JvmName("setTimestamp")
      set(value) {
        _builder.setTimestamp(value)
      }
    /**
     * <code>uint64 timestamp = 3;</code>
     */
    fun clearTimestamp() {
      _builder.clearTimestamp()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun ibc.lightclients.solomachine.v1.Solomachine.ConsensusState.copy(block: ibc.lightclients.solomachine.v1.ConsensusStateKt.Dsl.() -> Unit): ibc.lightclients.solomachine.v1.Solomachine.ConsensusState =
  ibc.lightclients.solomachine.v1.ConsensusStateKt.Dsl._create(this.toBuilder()).apply { block() }._build()
