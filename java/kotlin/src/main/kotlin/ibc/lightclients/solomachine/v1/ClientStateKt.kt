//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: ibc/lightclients/solomachine/v1/solomachine.proto

package ibc.lightclients.solomachine.v1;

@kotlin.jvm.JvmSynthetic
inline fun clientState(block: ibc.lightclients.solomachine.v1.ClientStateKt.Dsl.() -> Unit): ibc.lightclients.solomachine.v1.Solomachine.ClientState =
  ibc.lightclients.solomachine.v1.ClientStateKt.Dsl._create(ibc.lightclients.solomachine.v1.Solomachine.ClientState.newBuilder()).apply { block() }._build()
object ClientStateKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: ibc.lightclients.solomachine.v1.Solomachine.ClientState.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ibc.lightclients.solomachine.v1.Solomachine.ClientState.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ibc.lightclients.solomachine.v1.Solomachine.ClientState = _builder.build()

    /**
     * <pre>
     * latest sequence of the client state
     * </pre>
     *
     * <code>uint64 sequence = 1;</code>
     */
    var sequence: kotlin.Long
      @JvmName("getSequence")
      get() = _builder.getSequence()
      @JvmName("setSequence")
      set(value) {
        _builder.setSequence(value)
      }
    /**
     * <pre>
     * latest sequence of the client state
     * </pre>
     *
     * <code>uint64 sequence = 1;</code>
     */
    fun clearSequence() {
      _builder.clearSequence()
    }

    /**
     * <pre>
     * frozen sequence of the solo machine
     * </pre>
     *
     * <code>uint64 frozen_sequence = 2 [(.gogoproto.moretags) = "yaml:&#92;"frozen_sequence&#92;""];</code>
     */
    var frozenSequence: kotlin.Long
      @JvmName("getFrozenSequence")
      get() = _builder.getFrozenSequence()
      @JvmName("setFrozenSequence")
      set(value) {
        _builder.setFrozenSequence(value)
      }
    /**
     * <pre>
     * frozen sequence of the solo machine
     * </pre>
     *
     * <code>uint64 frozen_sequence = 2 [(.gogoproto.moretags) = "yaml:&#92;"frozen_sequence&#92;""];</code>
     */
    fun clearFrozenSequence() {
      _builder.clearFrozenSequence()
    }

    /**
     * <code>.ibc.lightclients.solomachine.v1.ConsensusState consensus_state = 3 [(.gogoproto.moretags) = "yaml:&#92;"consensus_state&#92;""];</code>
     */
    var consensusState: ibc.lightclients.solomachine.v1.Solomachine.ConsensusState
      @JvmName("getConsensusState")
      get() = _builder.getConsensusState()
      @JvmName("setConsensusState")
      set(value) {
        _builder.setConsensusState(value)
      }
    /**
     * <code>.ibc.lightclients.solomachine.v1.ConsensusState consensus_state = 3 [(.gogoproto.moretags) = "yaml:&#92;"consensus_state&#92;""];</code>
     */
    fun clearConsensusState() {
      _builder.clearConsensusState()
    }
    /**
     * <code>.ibc.lightclients.solomachine.v1.ConsensusState consensus_state = 3 [(.gogoproto.moretags) = "yaml:&#92;"consensus_state&#92;""];</code>
     * @return Whether the consensusState field is set.
     */
    fun hasConsensusState(): kotlin.Boolean {
      return _builder.hasConsensusState()
    }

    /**
     * <pre>
     * when set to true, will allow governance to update a solo machine client.
     * The client will be unfrozen if it is frozen.
     * </pre>
     *
     * <code>bool allow_update_after_proposal = 4 [(.gogoproto.moretags) = "yaml:&#92;"allow_update_after_proposal&#92;""];</code>
     */
    var allowUpdateAfterProposal: kotlin.Boolean
      @JvmName("getAllowUpdateAfterProposal")
      get() = _builder.getAllowUpdateAfterProposal()
      @JvmName("setAllowUpdateAfterProposal")
      set(value) {
        _builder.setAllowUpdateAfterProposal(value)
      }
    /**
     * <pre>
     * when set to true, will allow governance to update a solo machine client.
     * The client will be unfrozen if it is frozen.
     * </pre>
     *
     * <code>bool allow_update_after_proposal = 4 [(.gogoproto.moretags) = "yaml:&#92;"allow_update_after_proposal&#92;""];</code>
     */
    fun clearAllowUpdateAfterProposal() {
      _builder.clearAllowUpdateAfterProposal()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun ibc.lightclients.solomachine.v1.Solomachine.ClientState.copy(block: ibc.lightclients.solomachine.v1.ClientStateKt.Dsl.() -> Unit): ibc.lightclients.solomachine.v1.Solomachine.ClientState =
  ibc.lightclients.solomachine.v1.ClientStateKt.Dsl._create(this.toBuilder()).apply { block() }._build()
