//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: confio/proofs.proto

package ics23;

@kotlin.jvm.JvmSynthetic
inline fun innerOp(block: ics23.InnerOpKt.Dsl.() -> Unit): ics23.Proofs.InnerOp =
  ics23.InnerOpKt.Dsl._create(ics23.Proofs.InnerOp.newBuilder()).apply { block() }._build()
object InnerOpKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: ics23.Proofs.InnerOp.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ics23.Proofs.InnerOp.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ics23.Proofs.InnerOp = _builder.build()

    /**
     * <code>.ics23.HashOp hash = 1;</code>
     */
    var hash: ics23.Proofs.HashOp
      @JvmName("getHash")
      get() = _builder.getHash()
      @JvmName("setHash")
      set(value) {
        _builder.setHash(value)
      }
    /**
     * <code>.ics23.HashOp hash = 1;</code>
     */
    fun clearHash() {
      _builder.clearHash()
    }

    /**
     * <code>bytes prefix = 2;</code>
     */
    var prefix: com.google.protobuf.ByteString
      @JvmName("getPrefix")
      get() = _builder.getPrefix()
      @JvmName("setPrefix")
      set(value) {
        _builder.setPrefix(value)
      }
    /**
     * <code>bytes prefix = 2;</code>
     */
    fun clearPrefix() {
      _builder.clearPrefix()
    }

    /**
     * <code>bytes suffix = 3;</code>
     */
    var suffix: com.google.protobuf.ByteString
      @JvmName("getSuffix")
      get() = _builder.getSuffix()
      @JvmName("setSuffix")
      set(value) {
        _builder.setSuffix(value)
      }
    /**
     * <code>bytes suffix = 3;</code>
     */
    fun clearSuffix() {
      _builder.clearSuffix()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun ics23.Proofs.InnerOp.copy(block: ics23.InnerOpKt.Dsl.() -> Unit): ics23.Proofs.InnerOp =
  ics23.InnerOpKt.Dsl._create(this.toBuilder()).apply { block() }._build()
