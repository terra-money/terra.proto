# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: juno/feeshare/v1/events.proto, juno/feeshare/v1/feeshare.proto, juno/feeshare/v1/genesis.proto, juno/feeshare/v1/query.proto, juno/feeshare/v1/tx.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__
from ....cosmos.base.query import v1beta1 as ___cosmos_base_query_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class FeeShare(betterproto.Message):
    """
    FeeShare defines an instance that organizes fee distribution conditions for
    the owner of a given smart contract
    """

    contract_address: str = betterproto.string_field(1)
    """
    contract_address is the bech32 address of a registered contract in string
    form
    """

    deployer_address: str = betterproto.string_field(2)
    """
    deployer_address is the bech32 address of message sender. It must be the
    same as the contracts admin address.
    """

    withdrawer_address: str = betterproto.string_field(3)
    """
    withdrawer_address is the bech32 address of account receiving the
    transaction fees.
    """


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the module's genesis state."""

    params: "Params" = betterproto.message_field(1)
    """params are the feeshare module parameters"""

    fee_share: List["FeeShare"] = betterproto.message_field(2)
    """
    FeeShare is a slice of active registered contracts for fee distribution
    """


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the feeshare module params"""

    enable_fee_share: bool = betterproto.bool_field(1)
    """enable_feeshare defines a parameter to enable the feeshare module"""

    developer_shares: str = betterproto.string_field(2)
    """
    developer_shares defines the proportion of the transaction fees to be
    distributed to the registered contract owner
    """

    allowed_denoms: List[str] = betterproto.string_field(3)
    """
    allowed_denoms defines the list of denoms that are allowed to be paid to
    the contract withdraw addresses. If said denom is not in the list, the fees
    will ONLY be sent to the community pool. If this list is empty, all denoms
    are allowed.
    """


@dataclass(eq=False, repr=False)
class MsgRegisterFeeShare(betterproto.Message):
    """MsgRegisterFeeShare defines a message that registers a FeeShare"""

    contract_address: str = betterproto.string_field(1)
    """contract_address in bech32 format"""

    deployer_address: str = betterproto.string_field(2)
    """
    deployer_address is the bech32 address of message sender. It must be the
    same the contract's admin address
    """

    withdrawer_address: str = betterproto.string_field(3)
    """
    withdrawer_address is the bech32 address of account receiving the
    transaction fees
    """


@dataclass(eq=False, repr=False)
class MsgRegisterFeeShareResponse(betterproto.Message):
    """
    MsgRegisterFeeShareResponse defines the MsgRegisterFeeShare response type
    """

    pass


@dataclass(eq=False, repr=False)
class MsgUpdateFeeShare(betterproto.Message):
    """
    MsgUpdateFeeShare defines a message that updates the withdrawer address for
    a registered FeeShare
    """

    contract_address: str = betterproto.string_field(1)
    """contract_address in bech32 format"""

    deployer_address: str = betterproto.string_field(2)
    """
    deployer_address is the bech32 address of message sender. It must be the
    same the contract's admin address
    """

    withdrawer_address: str = betterproto.string_field(3)
    """
    withdrawer_address is the bech32 address of account receiving the
    transaction fees
    """


@dataclass(eq=False, repr=False)
class MsgUpdateFeeShareResponse(betterproto.Message):
    """
    MsgUpdateFeeShareResponse defines the MsgUpdateFeeShare response type
    """

    pass


@dataclass(eq=False, repr=False)
class MsgCancelFeeShare(betterproto.Message):
    """
    MsgCancelFeeShare defines a message that cancels a registered FeeShare
    """

    contract_address: str = betterproto.string_field(1)
    """contract_address in bech32 format"""

    deployer_address: str = betterproto.string_field(2)
    """
    deployer_address is the bech32 address of message sender. It must be the
    same the contract's admin address
    """


@dataclass(eq=False, repr=False)
class MsgCancelFeeShareResponse(betterproto.Message):
    """
    MsgCancelFeeShareResponse defines the MsgCancelFeeShare response type
    """

    pass


@dataclass(eq=False, repr=False)
class MsgUpdateParams(betterproto.Message):
    """
    MsgUpdateParams is the Msg/UpdateParams request type. Since: cosmos-sdk
    0.47
    """

    authority: str = betterproto.string_field(1)
    """
    authority is the address that controls the module (defaults to x/gov unless
    overwritten).
    """

    params: "Params" = betterproto.message_field(2)
    """
    params defines the x/feeshare parameters to update. NOTE: All parameters
    must be supplied.
    """


@dataclass(eq=False, repr=False)
class MsgUpdateParamsResponse(betterproto.Message):
    """
    MsgUpdateParamsResponse defines the response structure for executing a
    MsgUpdateParams message. Since: cosmos-sdk 0.47
    """

    pass


@dataclass(eq=False, repr=False)
class FeePayoutEvent(betterproto.Message):
    """
    FeeShareEvent defines an instance that organizes fee distribution
    conditions for the owner of a given smart contract
    """

    withdraw_address: str = betterproto.string_field(1)
    """Address of the account that will receive the payout"""

    fees_paid: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(2)
    """Amount of the payout"""


@dataclass(eq=False, repr=False)
class QueryFeeSharesRequest(betterproto.Message):
    """
    QueryFeeSharesRequest is the request type for the Query/FeeShares RPC
    method.
    """

    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )
    """pagination defines an optional pagination for the request."""


@dataclass(eq=False, repr=False)
class QueryFeeSharesResponse(betterproto.Message):
    """
    QueryFeeSharesResponse is the response type for the Query/FeeShares RPC
    method.
    """

    feeshare: List["FeeShare"] = betterproto.message_field(1)
    """FeeShare is a slice of all stored Reveneue"""

    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )
    """pagination defines the pagination in the response."""


@dataclass(eq=False, repr=False)
class QueryFeeShareRequest(betterproto.Message):
    """
    QueryFeeShareRequest is the request type for the Query/FeeShare RPC method.
    """

    contract_address: str = betterproto.string_field(1)
    """contract_address of a registered contract in bech32 format"""


@dataclass(eq=False, repr=False)
class QueryFeeShareResponse(betterproto.Message):
    """
    QueryFeeShareResponse is the response type for the Query/FeeShare RPC
    method.
    """

    feeshare: "FeeShare" = betterproto.message_field(1)
    """FeeShare is a stored Reveneue for the queried contract"""


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params is the returned FeeShare parameter"""


@dataclass(eq=False, repr=False)
class QueryDeployerFeeSharesRequest(betterproto.Message):
    """
    QueryDeployerFeeSharesRequest is the request type for the
    Query/DeployerFeeShares RPC method.
    """

    deployer_address: str = betterproto.string_field(1)
    """deployer_address in bech32 format"""

    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )
    """pagination defines an optional pagination for the request."""


@dataclass(eq=False, repr=False)
class QueryDeployerFeeSharesResponse(betterproto.Message):
    """
    QueryDeployerFeeSharesResponse is the response type for the
    Query/DeployerFeeShares RPC method.
    """

    contract_addresses: List[str] = betterproto.string_field(1)
    """
    contract_addresses is the slice of registered contract addresses for a
    deployer
    """

    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )
    """pagination defines the pagination in the response."""


@dataclass(eq=False, repr=False)
class QueryWithdrawerFeeSharesRequest(betterproto.Message):
    """
    QueryWithdrawerFeeSharesRequest is the request type for the
    Query/WithdrawerFeeShares RPC method.
    """

    withdrawer_address: str = betterproto.string_field(1)
    """withdrawer_address in bech32 format"""

    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )
    """pagination defines an optional pagination for the request."""


@dataclass(eq=False, repr=False)
class QueryWithdrawerFeeSharesResponse(betterproto.Message):
    """
    QueryWithdrawerFeeSharesResponse is the response type for the
    Query/WithdrawerFeeShares RPC method.
    """

    contract_addresses: List[str] = betterproto.string_field(1)
    """
    contract_addresses is the slice of registered contract addresses for a
    withdrawer
    """

    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )
    """pagination defines the pagination in the response."""


class MsgStub(betterproto.ServiceStub):
    async def register_fee_share(
        self,
        msg_register_fee_share: "MsgRegisterFeeShare",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgRegisterFeeShareResponse":
        return await self._unary_unary(
            "/juno.feeshare.v1.Msg/RegisterFeeShare",
            msg_register_fee_share,
            MsgRegisterFeeShareResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_fee_share(
        self,
        msg_update_fee_share: "MsgUpdateFeeShare",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateFeeShareResponse":
        return await self._unary_unary(
            "/juno.feeshare.v1.Msg/UpdateFeeShare",
            msg_update_fee_share,
            MsgUpdateFeeShareResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_fee_share(
        self,
        msg_cancel_fee_share: "MsgCancelFeeShare",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCancelFeeShareResponse":
        return await self._unary_unary(
            "/juno.feeshare.v1.Msg/CancelFeeShare",
            msg_cancel_fee_share,
            MsgCancelFeeShareResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_params(
        self,
        msg_update_params: "MsgUpdateParams",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateParamsResponse":
        return await self._unary_unary(
            "/juno.feeshare.v1.Msg/UpdateParams",
            msg_update_params,
            MsgUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def fee_shares(
        self,
        query_fee_shares_request: "QueryFeeSharesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryFeeSharesResponse":
        return await self._unary_unary(
            "/juno.feeshare.v1.Query/FeeShares",
            query_fee_shares_request,
            QueryFeeSharesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fee_share(
        self,
        query_fee_share_request: "QueryFeeShareRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryFeeShareResponse":
        return await self._unary_unary(
            "/juno.feeshare.v1.Query/FeeShare",
            query_fee_share_request,
            QueryFeeShareResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/juno.feeshare.v1.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def deployer_fee_shares(
        self,
        query_deployer_fee_shares_request: "QueryDeployerFeeSharesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDeployerFeeSharesResponse":
        return await self._unary_unary(
            "/juno.feeshare.v1.Query/DeployerFeeShares",
            query_deployer_fee_shares_request,
            QueryDeployerFeeSharesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def withdrawer_fee_shares(
        self,
        query_withdrawer_fee_shares_request: "QueryWithdrawerFeeSharesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryWithdrawerFeeSharesResponse":
        return await self._unary_unary(
            "/juno.feeshare.v1.Query/WithdrawerFeeShares",
            query_withdrawer_fee_shares_request,
            QueryWithdrawerFeeSharesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):

    async def register_fee_share(
        self, msg_register_fee_share: "MsgRegisterFeeShare"
    ) -> "MsgRegisterFeeShareResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_fee_share(
        self, msg_update_fee_share: "MsgUpdateFeeShare"
    ) -> "MsgUpdateFeeShareResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cancel_fee_share(
        self, msg_cancel_fee_share: "MsgCancelFeeShare"
    ) -> "MsgCancelFeeShareResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_params(
        self, msg_update_params: "MsgUpdateParams"
    ) -> "MsgUpdateParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_register_fee_share(
        self,
        stream: "grpclib.server.Stream[MsgRegisterFeeShare, MsgRegisterFeeShareResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.register_fee_share(request)
        await stream.send_message(response)

    async def __rpc_update_fee_share(
        self,
        stream: "grpclib.server.Stream[MsgUpdateFeeShare, MsgUpdateFeeShareResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_fee_share(request)
        await stream.send_message(response)

    async def __rpc_cancel_fee_share(
        self,
        stream: "grpclib.server.Stream[MsgCancelFeeShare, MsgCancelFeeShareResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.cancel_fee_share(request)
        await stream.send_message(response)

    async def __rpc_update_params(
        self, stream: "grpclib.server.Stream[MsgUpdateParams, MsgUpdateParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_params(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/juno.feeshare.v1.Msg/RegisterFeeShare": grpclib.const.Handler(
                self.__rpc_register_fee_share,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgRegisterFeeShare,
                MsgRegisterFeeShareResponse,
            ),
            "/juno.feeshare.v1.Msg/UpdateFeeShare": grpclib.const.Handler(
                self.__rpc_update_fee_share,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateFeeShare,
                MsgUpdateFeeShareResponse,
            ),
            "/juno.feeshare.v1.Msg/CancelFeeShare": grpclib.const.Handler(
                self.__rpc_cancel_fee_share,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCancelFeeShare,
                MsgCancelFeeShareResponse,
            ),
            "/juno.feeshare.v1.Msg/UpdateParams": grpclib.const.Handler(
                self.__rpc_update_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateParams,
                MsgUpdateParamsResponse,
            ),
        }


class QueryBase(ServiceBase):

    async def fee_shares(
        self, query_fee_shares_request: "QueryFeeSharesRequest"
    ) -> "QueryFeeSharesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fee_share(
        self, query_fee_share_request: "QueryFeeShareRequest"
    ) -> "QueryFeeShareResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def deployer_fee_shares(
        self, query_deployer_fee_shares_request: "QueryDeployerFeeSharesRequest"
    ) -> "QueryDeployerFeeSharesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def withdrawer_fee_shares(
        self, query_withdrawer_fee_shares_request: "QueryWithdrawerFeeSharesRequest"
    ) -> "QueryWithdrawerFeeSharesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_fee_shares(
        self,
        stream: "grpclib.server.Stream[QueryFeeSharesRequest, QueryFeeSharesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fee_shares(request)
        await stream.send_message(response)

    async def __rpc_fee_share(
        self,
        stream: "grpclib.server.Stream[QueryFeeShareRequest, QueryFeeShareResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fee_share(request)
        await stream.send_message(response)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_deployer_fee_shares(
        self,
        stream: "grpclib.server.Stream[QueryDeployerFeeSharesRequest, QueryDeployerFeeSharesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.deployer_fee_shares(request)
        await stream.send_message(response)

    async def __rpc_withdrawer_fee_shares(
        self,
        stream: "grpclib.server.Stream[QueryWithdrawerFeeSharesRequest, QueryWithdrawerFeeSharesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.withdrawer_fee_shares(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/juno.feeshare.v1.Query/FeeShares": grpclib.const.Handler(
                self.__rpc_fee_shares,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryFeeSharesRequest,
                QueryFeeSharesResponse,
            ),
            "/juno.feeshare.v1.Query/FeeShare": grpclib.const.Handler(
                self.__rpc_fee_share,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryFeeShareRequest,
                QueryFeeShareResponse,
            ),
            "/juno.feeshare.v1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/juno.feeshare.v1.Query/DeployerFeeShares": grpclib.const.Handler(
                self.__rpc_deployer_fee_shares,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDeployerFeeSharesRequest,
                QueryDeployerFeeSharesResponse,
            ),
            "/juno.feeshare.v1.Query/WithdrawerFeeShares": grpclib.const.Handler(
                self.__rpc_withdrawer_fee_shares,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryWithdrawerFeeSharesRequest,
                QueryWithdrawerFeeSharesResponse,
            ),
        }
