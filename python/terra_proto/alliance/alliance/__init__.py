# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: alliance/alliance/alliance.proto, alliance/alliance/delegations.proto, alliance/alliance/events.proto, alliance/alliance/genesis.proto, alliance/alliance/gov.proto, alliance/alliance/params.proto, alliance/alliance/query.proto, alliance/alliance/redelegations.proto, alliance/alliance/tx.proto, alliance/alliance/unbonding.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import (
    datetime,
    timedelta,
)
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ...cosmos.base import v1beta1 as __cosmos_base_v1_beta1__
from ...cosmos.base.query import v1beta1 as __cosmos_base_query_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    reward_delay_time: timedelta = betterproto.message_field(1)
    take_rate_claim_interval: timedelta = betterproto.message_field(2)
    """Time interval between consecutive applications of `take_rate`"""

    last_take_rate_claim_time: datetime = betterproto.message_field(3)
    """Last application of `take_rate` on assets"""


@dataclass(eq=False, repr=False)
class RewardHistory(betterproto.Message):
    denom: str = betterproto.string_field(1)
    index: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RewardWeightRange(betterproto.Message):
    min: str = betterproto.string_field(1)
    max: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class AllianceAsset(betterproto.Message):
    """key: denom value: AllianceAsset"""

    denom: str = betterproto.string_field(1)
    """
    Denom of the asset. It could either be a native token or an IBC token
    """

    reward_weight: str = betterproto.string_field(2)
    """
    The reward weight specifies the ratio of rewards that will be given to each
    alliance asset It does not need to sum to 1. rate = weight / total_weight
    Native asset is always assumed to have a weight of 1.s
    """

    take_rate: str = betterproto.string_field(3)
    """
    A positive take rate is used for liquid staking derivatives. It defines an
    rate that is applied per take_rate_interval that will be redirected to the
    distribution rewards pool
    """

    total_tokens: str = betterproto.string_field(4)
    total_validator_shares: str = betterproto.string_field(5)
    reward_start_time: datetime = betterproto.message_field(6)
    reward_change_rate: str = betterproto.string_field(7)
    reward_change_interval: timedelta = betterproto.message_field(8)
    last_reward_change_time: datetime = betterproto.message_field(9)
    reward_weight_range: "RewardWeightRange" = betterproto.message_field(10)
    """
    set a bound of weight range to limit how much reward weights can scale.
    """

    is_initialized: bool = betterproto.bool_field(11)
    """
    flag to check if an asset has completed the initialization process after
    the reward delay
    """


@dataclass(eq=False, repr=False)
class RewardWeightChangeSnapshot(betterproto.Message):
    prev_reward_weight: str = betterproto.string_field(1)
    reward_histories: List["RewardHistory"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MsgDelegate(betterproto.Message):
    delegator_address: str = betterproto.string_field(1)
    validator_address: str = betterproto.string_field(2)
    amount: "__cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MsgDelegateResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgUndelegate(betterproto.Message):
    delegator_address: str = betterproto.string_field(1)
    validator_address: str = betterproto.string_field(2)
    amount: "__cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MsgUndelegateResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgRedelegate(betterproto.Message):
    delegator_address: str = betterproto.string_field(1)
    validator_src_address: str = betterproto.string_field(2)
    validator_dst_address: str = betterproto.string_field(3)
    amount: "__cosmos_base_v1_beta1__.Coin" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class MsgRedelegateResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgClaimDelegationRewards(betterproto.Message):
    delegator_address: str = betterproto.string_field(1)
    validator_address: str = betterproto.string_field(2)
    denom: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MsgClaimDelegationRewardsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgUpdateParams(betterproto.Message):
    authority: str = betterproto.string_field(1)
    params: "Params" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MsgUpdateParamsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgCreateAlliance(betterproto.Message):
    authority: str = betterproto.string_field(1)
    denom: str = betterproto.string_field(2)
    """
    Denom of the asset. It could either be a native token or an IBC token
    """

    reward_weight: str = betterproto.string_field(3)
    """
    The reward weight specifies the ratio of rewards that will be given to each
    alliance asset It does not need to sum to 1. rate = weight / total_weight
    Native asset is always assumed to have a weight of 1.
    """

    take_rate: str = betterproto.string_field(4)
    """
    A positive take rate is used for liquid staking derivatives. It defines an
    annualized reward rate that will be redirected to the distribution rewards
    pool
    """

    reward_change_rate: str = betterproto.string_field(5)
    reward_change_interval: timedelta = betterproto.message_field(6)
    reward_weight_range: "RewardWeightRange" = betterproto.message_field(7)
    """
    set a bound of weight range to limit how much reward weights can scale.
    """


@dataclass(eq=False, repr=False)
class MsgCreateAllianceResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgUpdateAlliance(betterproto.Message):
    authority: str = betterproto.string_field(1)
    denom: str = betterproto.string_field(2)
    """
    Denom of the asset. It could either be a native token or an IBC token
    """

    reward_weight: str = betterproto.string_field(3)
    """
    The reward weight specifies the ratio of rewards that will be given to each
    alliance asset It does not need to sum to 1. rate = weight / total_weight
    Native asset is always assumed to have a weight of 1.
    """

    take_rate: str = betterproto.string_field(4)
    reward_change_rate: str = betterproto.string_field(5)
    reward_change_interval: timedelta = betterproto.message_field(6)
    reward_weight_range: "RewardWeightRange" = betterproto.message_field(7)
    """
    set a bound of weight range to limit how much reward weights can scale.
    """


@dataclass(eq=False, repr=False)
class MsgUpdateAllianceResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgDeleteAlliance(betterproto.Message):
    authority: str = betterproto.string_field(1)
    denom: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MsgDeleteAllianceResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueuedRedelegation(betterproto.Message):
    """Used internally to keep track of redelegations"""

    entries: List["Redelegation"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Redelegation(betterproto.Message):
    delegator_address: str = betterproto.string_field(1)
    """internal or external user address"""

    src_validator_address: str = betterproto.string_field(2)
    """redelegation source validator"""

    dst_validator_address: str = betterproto.string_field(3)
    """redelegation destination validator"""

    balance: "__cosmos_base_v1_beta1__.Coin" = betterproto.message_field(4)
    """amount to redelegate"""


@dataclass(eq=False, repr=False)
class RedelegationEntry(betterproto.Message):
    """Used on QueryServer"""

    delegator_address: str = betterproto.string_field(1)
    """internal or external user address"""

    src_validator_address: str = betterproto.string_field(2)
    """redelegation source validator"""

    dst_validator_address: str = betterproto.string_field(3)
    """redelegation destination validator"""

    balance: "__cosmos_base_v1_beta1__.Coin" = betterproto.message_field(4)
    """amount to redelegate"""

    completion_time: datetime = betterproto.message_field(5)
    """completion_time defines the unix time for redelegation completion."""


@dataclass(eq=False, repr=False)
class MsgCreateAllianceProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    """the title of the update proposal"""

    description: str = betterproto.string_field(2)
    """the description of the proposal"""

    denom: str = betterproto.string_field(3)
    """
    Denom of the asset. It could either be a native token or an IBC token
    """

    reward_weight: str = betterproto.string_field(4)
    """
    The reward weight specifies the ratio of rewards that will be given to each
    alliance asset It does not need to sum to 1. rate = weight / total_weight
    Native asset is always assumed to have a weight of 1.
    """

    take_rate: str = betterproto.string_field(5)
    """
    A positive take rate is used for liquid staking derivatives. It defines an
    annualized reward rate that will be redirected to the distribution rewards
    pool
    """

    reward_change_rate: str = betterproto.string_field(6)
    reward_change_interval: timedelta = betterproto.message_field(7)
    reward_weight_range: "RewardWeightRange" = betterproto.message_field(8)
    """
    set a bound of weight range to limit how much reward weights can scale.
    """


@dataclass(eq=False, repr=False)
class MsgUpdateAllianceProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    """the title of the update proposal"""

    description: str = betterproto.string_field(2)
    """the description of the proposal"""

    denom: str = betterproto.string_field(3)
    """
    Denom of the asset. It could either be a native token or an IBC token
    """

    reward_weight: str = betterproto.string_field(4)
    """
    The reward weight specifies the ratio of rewards that will be given to each
    alliance asset It does not need to sum to 1. rate = weight / total_weight
    Native asset is always assumed to have a weight of 1.
    """

    take_rate: str = betterproto.string_field(5)
    reward_change_rate: str = betterproto.string_field(6)
    reward_change_interval: timedelta = betterproto.message_field(7)
    reward_weight_range: "RewardWeightRange" = betterproto.message_field(8)
    """
    set a bound of weight range to limit how much reward weights can scale.
    """


@dataclass(eq=False, repr=False)
class MsgDeleteAllianceProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    """the title of the update proposal"""

    description: str = betterproto.string_field(2)
    """the description of the proposal"""

    denom: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class DelegateAllianceEvent(betterproto.Message):
    alliance_sender: str = betterproto.string_field(1)
    validator: str = betterproto.string_field(2)
    coin: "__cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)
    new_shares: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class UndelegateAllianceEvent(betterproto.Message):
    alliance_sender: str = betterproto.string_field(1)
    validator: str = betterproto.string_field(2)
    coin: "__cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)
    completion_time: datetime = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class RedelegateAllianceEvent(betterproto.Message):
    alliance_sender: str = betterproto.string_field(1)
    source_validator: str = betterproto.string_field(2)
    destination_validator: str = betterproto.string_field(3)
    coin: "__cosmos_base_v1_beta1__.Coin" = betterproto.message_field(4)
    completion_time: datetime = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class ClaimAllianceRewardsEvent(betterproto.Message):
    alliance_sender: str = betterproto.string_field(1)
    validator: str = betterproto.string_field(2)
    coins: List["__cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class DeductAllianceAssetsEvent(betterproto.Message):
    coins: List["__cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Delegation(betterproto.Message):
    delegator_address: str = betterproto.string_field(1)
    """delegator_address is the bech32-encoded address of the delegator."""

    validator_address: str = betterproto.string_field(2)
    """validator_address is the bech32-encoded address of the validator."""

    denom: str = betterproto.string_field(3)
    """denom of token staked"""

    shares: str = betterproto.string_field(4)
    """shares define the delegation shares received."""

    reward_history: List["RewardHistory"] = betterproto.message_field(5)
    last_reward_claim_height: int = betterproto.uint64_field(6)


@dataclass(eq=False, repr=False)
class Undelegation(betterproto.Message):
    delegator_address: str = betterproto.string_field(1)
    validator_address: str = betterproto.string_field(2)
    balance: "__cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class QueuedUndelegation(betterproto.Message):
    entries: List["Undelegation"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AllianceValidatorInfo(betterproto.Message):
    global_reward_history: List["RewardHistory"] = betterproto.message_field(1)
    total_delegator_shares: List["__cosmos_base_v1_beta1__.DecCoin"] = (
        betterproto.message_field(2)
    )
    validator_shares: List["__cosmos_base_v1_beta1__.DecCoin"] = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class UnbondingDelegation(betterproto.Message):
    """
    UnbondingDelegation defines an unbonding object with relevant metadata.
    """

    completion_time: datetime = betterproto.message_field(1)
    """completion_time is the unix time for unbonding completion."""

    validator_address: str = betterproto.string_field(2)
    """validator_address is the bech32-encoded address of the validator."""

    amount: str = betterproto.string_field(3)
    """amount defines the tokens to receive at completion."""


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """Params"""

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    params: "Params" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryAlliancesRequest(betterproto.Message):
    """Alliances"""

    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryAlliancesResponse(betterproto.Message):
    alliances: List["AllianceAsset"] = betterproto.message_field(1)
    pagination: "__cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryAllianceRequest(betterproto.Message):
    """Alliance"""

    denom: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryAllianceResponse(betterproto.Message):
    alliance: "AllianceAsset" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryIbcAllianceRequest(betterproto.Message):
    hash: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        warnings.warn("QueryIbcAllianceRequest is deprecated", DeprecationWarning)
        super().__post_init__()


@dataclass(eq=False, repr=False)
class QueryAllianceValidatorRequest(betterproto.Message):
    validator_addr: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryAllAllianceValidatorsRequest(betterproto.Message):
    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryAllAlliancesDelegationsRequest(betterproto.Message):
    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryAlliancesDelegationsRequest(betterproto.Message):
    """AlliancesDelegation"""

    delegator_addr: str = betterproto.string_field(1)
    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryAlliancesDelegationByValidatorRequest(betterproto.Message):
    """AlliancesDelegationByValidator"""

    delegator_addr: str = betterproto.string_field(1)
    validator_addr: str = betterproto.string_field(2)
    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class DelegationResponse(betterproto.Message):
    """
    DelegationResponse is equivalent to Delegation except that it contains a
    balance in addition to shares which is more suitable for client responses.
    """

    delegation: "Delegation" = betterproto.message_field(1)
    balance: "__cosmos_base_v1_beta1__.Coin" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class QueryAlliancesDelegationsResponse(betterproto.Message):
    delegations: List["DelegationResponse"] = betterproto.message_field(1)
    pagination: "__cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryAllianceDelegationRequest(betterproto.Message):
    """AllianceDelegation"""

    delegator_addr: str = betterproto.string_field(1)
    validator_addr: str = betterproto.string_field(2)
    denom: str = betterproto.string_field(3)
    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(4)
    )


@dataclass(eq=False, repr=False)
class QueryIbcAllianceDelegationRequest(betterproto.Message):
    delegator_addr: str = betterproto.string_field(1)
    validator_addr: str = betterproto.string_field(2)
    hash: str = betterproto.string_field(3)
    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(4)
    )

    def __post_init__(self) -> None:
        warnings.warn(
            "QueryIbcAllianceDelegationRequest is deprecated", DeprecationWarning
        )
        super().__post_init__()


@dataclass(eq=False, repr=False)
class QueryAllianceDelegationResponse(betterproto.Message):
    delegation: "DelegationResponse" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryAllianceDelegationRewardsRequest(betterproto.Message):
    """AllianceDelegation"""

    delegator_addr: str = betterproto.string_field(1)
    validator_addr: str = betterproto.string_field(2)
    denom: str = betterproto.string_field(3)
    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(4)
    )


@dataclass(eq=False, repr=False)
class QueryIbcAllianceDelegationRewardsRequest(betterproto.Message):
    delegator_addr: str = betterproto.string_field(1)
    validator_addr: str = betterproto.string_field(2)
    hash: str = betterproto.string_field(3)
    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(4)
    )

    def __post_init__(self) -> None:
        warnings.warn(
            "QueryIbcAllianceDelegationRewardsRequest is deprecated", DeprecationWarning
        )
        super().__post_init__()


@dataclass(eq=False, repr=False)
class QueryAllianceDelegationRewardsResponse(betterproto.Message):
    rewards: List["__cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryAllianceValidatorResponse(betterproto.Message):
    validator_addr: str = betterproto.string_field(1)
    total_delegation_shares: List["__cosmos_base_v1_beta1__.DecCoin"] = (
        betterproto.message_field(2)
    )
    validator_shares: List["__cosmos_base_v1_beta1__.DecCoin"] = (
        betterproto.message_field(3)
    )
    total_staked: List["__cosmos_base_v1_beta1__.DecCoin"] = betterproto.message_field(
        4
    )


@dataclass(eq=False, repr=False)
class QueryAllianceValidatorsResponse(betterproto.Message):
    validators: List["QueryAllianceValidatorResponse"] = betterproto.message_field(1)
    pagination: "__cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryAllianceUnbondingsByDenomAndDelegatorRequest(betterproto.Message):
    """AllianceDelegation"""

    denom: str = betterproto.string_field(1)
    delegator_addr: str = betterproto.string_field(2)
    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryAllianceUnbondingsByDenomAndDelegatorResponse(betterproto.Message):
    unbondings: List["UnbondingDelegation"] = betterproto.message_field(1)
    pagination: "__cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryAllianceUnbondingsRequest(betterproto.Message):
    denom: str = betterproto.string_field(1)
    delegator_addr: str = betterproto.string_field(2)
    validator_addr: str = betterproto.string_field(3)
    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(4)
    )


@dataclass(eq=False, repr=False)
class QueryAllianceUnbondingsResponse(betterproto.Message):
    unbondings: List["UnbondingDelegation"] = betterproto.message_field(1)
    pagination: "__cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryAllianceRedelegationsRequest(betterproto.Message):
    """Redelegations"""

    denom: str = betterproto.string_field(1)
    delegator_addr: str = betterproto.string_field(2)
    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryAllianceRedelegationsResponse(betterproto.Message):
    redelegations: List["RedelegationEntry"] = betterproto.message_field(1)
    pagination: "__cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class ValidatorInfoState(betterproto.Message):
    validator_address: str = betterproto.string_field(1)
    validator: "AllianceValidatorInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RedelegationState(betterproto.Message):
    completion_time: datetime = betterproto.message_field(1)
    redelegation: "Redelegation" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class UndelegationState(betterproto.Message):
    completion_time: datetime = betterproto.message_field(1)
    undelegation: "QueuedUndelegation" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RewardWeightChangeSnapshotState(betterproto.Message):
    height: int = betterproto.uint64_field(1)
    validator: str = betterproto.string_field(2)
    denom: str = betterproto.string_field(3)
    snapshot: "RewardWeightChangeSnapshot" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the module's genesis state."""

    params: "Params" = betterproto.message_field(1)
    assets: List["AllianceAsset"] = betterproto.message_field(2)
    validator_infos: List["ValidatorInfoState"] = betterproto.message_field(3)
    reward_weight_change_snaphots: List["RewardWeightChangeSnapshotState"] = (
        betterproto.message_field(4)
    )
    delegations: List["Delegation"] = betterproto.message_field(5)
    redelegations: List["RedelegationState"] = betterproto.message_field(6)
    undelegations: List["UndelegationState"] = betterproto.message_field(7)


class MsgStub(betterproto.ServiceStub):
    async def delegate(
        self,
        msg_delegate: "MsgDelegate",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgDelegateResponse":
        return await self._unary_unary(
            "/alliance.alliance.Msg/Delegate",
            msg_delegate,
            MsgDelegateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def redelegate(
        self,
        msg_redelegate: "MsgRedelegate",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgRedelegateResponse":
        return await self._unary_unary(
            "/alliance.alliance.Msg/Redelegate",
            msg_redelegate,
            MsgRedelegateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def undelegate(
        self,
        msg_undelegate: "MsgUndelegate",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUndelegateResponse":
        return await self._unary_unary(
            "/alliance.alliance.Msg/Undelegate",
            msg_undelegate,
            MsgUndelegateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def claim_delegation_rewards(
        self,
        msg_claim_delegation_rewards: "MsgClaimDelegationRewards",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgClaimDelegationRewardsResponse":
        return await self._unary_unary(
            "/alliance.alliance.Msg/ClaimDelegationRewards",
            msg_claim_delegation_rewards,
            MsgClaimDelegationRewardsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_params(
        self,
        msg_update_params: "MsgUpdateParams",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateParamsResponse":
        return await self._unary_unary(
            "/alliance.alliance.Msg/UpdateParams",
            msg_update_params,
            MsgUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_alliance(
        self,
        msg_create_alliance: "MsgCreateAlliance",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCreateAllianceResponse":
        return await self._unary_unary(
            "/alliance.alliance.Msg/CreateAlliance",
            msg_create_alliance,
            MsgCreateAllianceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_alliance(
        self,
        msg_update_alliance: "MsgUpdateAlliance",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateAllianceResponse":
        return await self._unary_unary(
            "/alliance.alliance.Msg/UpdateAlliance",
            msg_update_alliance,
            MsgUpdateAllianceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_alliance(
        self,
        msg_delete_alliance: "MsgDeleteAlliance",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgDeleteAllianceResponse":
        return await self._unary_unary(
            "/alliance.alliance.Msg/DeleteAlliance",
            msg_delete_alliance,
            MsgDeleteAllianceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/alliance.alliance.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def alliances(
        self,
        query_alliances_request: "QueryAlliancesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAlliancesResponse":
        return await self._unary_unary(
            "/alliance.alliance.Query/Alliances",
            query_alliances_request,
            QueryAlliancesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def ibc_alliance(
        self,
        query_ibc_alliance_request: "QueryIbcAllianceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllianceResponse":
        return await self._unary_unary(
            "/alliance.alliance.Query/IBCAlliance",
            query_ibc_alliance_request,
            QueryAllianceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def all_alliances_delegations(
        self,
        query_all_alliances_delegations_request: "QueryAllAlliancesDelegationsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAlliancesDelegationsResponse":
        return await self._unary_unary(
            "/alliance.alliance.Query/AllAlliancesDelegations",
            query_all_alliances_delegations_request,
            QueryAlliancesDelegationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def alliance_validator(
        self,
        query_alliance_validator_request: "QueryAllianceValidatorRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllianceValidatorResponse":
        return await self._unary_unary(
            "/alliance.alliance.Query/AllianceValidator",
            query_alliance_validator_request,
            QueryAllianceValidatorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def all_alliance_validators(
        self,
        query_all_alliance_validators_request: "QueryAllAllianceValidatorsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllianceValidatorsResponse":
        return await self._unary_unary(
            "/alliance.alliance.Query/AllAllianceValidators",
            query_all_alliance_validators_request,
            QueryAllianceValidatorsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def alliances_delegation(
        self,
        query_alliances_delegations_request: "QueryAlliancesDelegationsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAlliancesDelegationsResponse":
        return await self._unary_unary(
            "/alliance.alliance.Query/AlliancesDelegation",
            query_alliances_delegations_request,
            QueryAlliancesDelegationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def alliances_delegation_by_validator(
        self,
        query_alliances_delegation_by_validator_request: "QueryAlliancesDelegationByValidatorRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAlliancesDelegationsResponse":
        return await self._unary_unary(
            "/alliance.alliance.Query/AlliancesDelegationByValidator",
            query_alliances_delegation_by_validator_request,
            QueryAlliancesDelegationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def alliance_delegation(
        self,
        query_alliance_delegation_request: "QueryAllianceDelegationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllianceDelegationResponse":
        return await self._unary_unary(
            "/alliance.alliance.Query/AllianceDelegation",
            query_alliance_delegation_request,
            QueryAllianceDelegationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def ibc_alliance_delegation(
        self,
        query_ibc_alliance_delegation_request: "QueryIbcAllianceDelegationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllianceDelegationResponse":
        return await self._unary_unary(
            "/alliance.alliance.Query/IBCAllianceDelegation",
            query_ibc_alliance_delegation_request,
            QueryAllianceDelegationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def alliance_delegation_rewards(
        self,
        query_alliance_delegation_rewards_request: "QueryAllianceDelegationRewardsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllianceDelegationRewardsResponse":
        return await self._unary_unary(
            "/alliance.alliance.Query/AllianceDelegationRewards",
            query_alliance_delegation_rewards_request,
            QueryAllianceDelegationRewardsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def ibc_alliance_delegation_rewards(
        self,
        query_ibc_alliance_delegation_rewards_request: "QueryIbcAllianceDelegationRewardsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllianceDelegationRewardsResponse":
        return await self._unary_unary(
            "/alliance.alliance.Query/IBCAllianceDelegationRewards",
            query_ibc_alliance_delegation_rewards_request,
            QueryAllianceDelegationRewardsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def alliance_unbondings_by_denom_and_delegator(
        self,
        query_alliance_unbondings_by_denom_and_delegator_request: "QueryAllianceUnbondingsByDenomAndDelegatorRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllianceUnbondingsByDenomAndDelegatorResponse":
        return await self._unary_unary(
            "/alliance.alliance.Query/AllianceUnbondingsByDenomAndDelegator",
            query_alliance_unbondings_by_denom_and_delegator_request,
            QueryAllianceUnbondingsByDenomAndDelegatorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def alliance_unbondings(
        self,
        query_alliance_unbondings_request: "QueryAllianceUnbondingsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllianceUnbondingsResponse":
        return await self._unary_unary(
            "/alliance.alliance.Query/AllianceUnbondings",
            query_alliance_unbondings_request,
            QueryAllianceUnbondingsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def alliance_redelegations(
        self,
        query_alliance_redelegations_request: "QueryAllianceRedelegationsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllianceRedelegationsResponse":
        return await self._unary_unary(
            "/alliance.alliance.Query/AllianceRedelegations",
            query_alliance_redelegations_request,
            QueryAllianceRedelegationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def alliance(
        self,
        query_alliance_request: "QueryAllianceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllianceResponse":
        return await self._unary_unary(
            "/alliance.alliance.Query/Alliance",
            query_alliance_request,
            QueryAllianceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):

    async def delegate(self, msg_delegate: "MsgDelegate") -> "MsgDelegateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def redelegate(
        self, msg_redelegate: "MsgRedelegate"
    ) -> "MsgRedelegateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def undelegate(
        self, msg_undelegate: "MsgUndelegate"
    ) -> "MsgUndelegateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def claim_delegation_rewards(
        self, msg_claim_delegation_rewards: "MsgClaimDelegationRewards"
    ) -> "MsgClaimDelegationRewardsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_params(
        self, msg_update_params: "MsgUpdateParams"
    ) -> "MsgUpdateParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_alliance(
        self, msg_create_alliance: "MsgCreateAlliance"
    ) -> "MsgCreateAllianceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_alliance(
        self, msg_update_alliance: "MsgUpdateAlliance"
    ) -> "MsgUpdateAllianceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_alliance(
        self, msg_delete_alliance: "MsgDeleteAlliance"
    ) -> "MsgDeleteAllianceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_delegate(
        self, stream: "grpclib.server.Stream[MsgDelegate, MsgDelegateResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delegate(request)
        await stream.send_message(response)

    async def __rpc_redelegate(
        self, stream: "grpclib.server.Stream[MsgRedelegate, MsgRedelegateResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.redelegate(request)
        await stream.send_message(response)

    async def __rpc_undelegate(
        self, stream: "grpclib.server.Stream[MsgUndelegate, MsgUndelegateResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.undelegate(request)
        await stream.send_message(response)

    async def __rpc_claim_delegation_rewards(
        self,
        stream: "grpclib.server.Stream[MsgClaimDelegationRewards, MsgClaimDelegationRewardsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.claim_delegation_rewards(request)
        await stream.send_message(response)

    async def __rpc_update_params(
        self, stream: "grpclib.server.Stream[MsgUpdateParams, MsgUpdateParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_params(request)
        await stream.send_message(response)

    async def __rpc_create_alliance(
        self,
        stream: "grpclib.server.Stream[MsgCreateAlliance, MsgCreateAllianceResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_alliance(request)
        await stream.send_message(response)

    async def __rpc_update_alliance(
        self,
        stream: "grpclib.server.Stream[MsgUpdateAlliance, MsgUpdateAllianceResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_alliance(request)
        await stream.send_message(response)

    async def __rpc_delete_alliance(
        self,
        stream: "grpclib.server.Stream[MsgDeleteAlliance, MsgDeleteAllianceResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_alliance(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/alliance.alliance.Msg/Delegate": grpclib.const.Handler(
                self.__rpc_delegate,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgDelegate,
                MsgDelegateResponse,
            ),
            "/alliance.alliance.Msg/Redelegate": grpclib.const.Handler(
                self.__rpc_redelegate,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgRedelegate,
                MsgRedelegateResponse,
            ),
            "/alliance.alliance.Msg/Undelegate": grpclib.const.Handler(
                self.__rpc_undelegate,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUndelegate,
                MsgUndelegateResponse,
            ),
            "/alliance.alliance.Msg/ClaimDelegationRewards": grpclib.const.Handler(
                self.__rpc_claim_delegation_rewards,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgClaimDelegationRewards,
                MsgClaimDelegationRewardsResponse,
            ),
            "/alliance.alliance.Msg/UpdateParams": grpclib.const.Handler(
                self.__rpc_update_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateParams,
                MsgUpdateParamsResponse,
            ),
            "/alliance.alliance.Msg/CreateAlliance": grpclib.const.Handler(
                self.__rpc_create_alliance,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreateAlliance,
                MsgCreateAllianceResponse,
            ),
            "/alliance.alliance.Msg/UpdateAlliance": grpclib.const.Handler(
                self.__rpc_update_alliance,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateAlliance,
                MsgUpdateAllianceResponse,
            ),
            "/alliance.alliance.Msg/DeleteAlliance": grpclib.const.Handler(
                self.__rpc_delete_alliance,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgDeleteAlliance,
                MsgDeleteAllianceResponse,
            ),
        }


class QueryBase(ServiceBase):

    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def alliances(
        self, query_alliances_request: "QueryAlliancesRequest"
    ) -> "QueryAlliancesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def ibc_alliance(
        self, query_ibc_alliance_request: "QueryIbcAllianceRequest"
    ) -> "QueryAllianceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def all_alliances_delegations(
        self,
        query_all_alliances_delegations_request: "QueryAllAlliancesDelegationsRequest",
    ) -> "QueryAlliancesDelegationsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def alliance_validator(
        self, query_alliance_validator_request: "QueryAllianceValidatorRequest"
    ) -> "QueryAllianceValidatorResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def all_alliance_validators(
        self, query_all_alliance_validators_request: "QueryAllAllianceValidatorsRequest"
    ) -> "QueryAllianceValidatorsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def alliances_delegation(
        self, query_alliances_delegations_request: "QueryAlliancesDelegationsRequest"
    ) -> "QueryAlliancesDelegationsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def alliances_delegation_by_validator(
        self,
        query_alliances_delegation_by_validator_request: "QueryAlliancesDelegationByValidatorRequest",
    ) -> "QueryAlliancesDelegationsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def alliance_delegation(
        self, query_alliance_delegation_request: "QueryAllianceDelegationRequest"
    ) -> "QueryAllianceDelegationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def ibc_alliance_delegation(
        self, query_ibc_alliance_delegation_request: "QueryIbcAllianceDelegationRequest"
    ) -> "QueryAllianceDelegationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def alliance_delegation_rewards(
        self,
        query_alliance_delegation_rewards_request: "QueryAllianceDelegationRewardsRequest",
    ) -> "QueryAllianceDelegationRewardsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def ibc_alliance_delegation_rewards(
        self,
        query_ibc_alliance_delegation_rewards_request: "QueryIbcAllianceDelegationRewardsRequest",
    ) -> "QueryAllianceDelegationRewardsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def alliance_unbondings_by_denom_and_delegator(
        self,
        query_alliance_unbondings_by_denom_and_delegator_request: "QueryAllianceUnbondingsByDenomAndDelegatorRequest",
    ) -> "QueryAllianceUnbondingsByDenomAndDelegatorResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def alliance_unbondings(
        self, query_alliance_unbondings_request: "QueryAllianceUnbondingsRequest"
    ) -> "QueryAllianceUnbondingsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def alliance_redelegations(
        self, query_alliance_redelegations_request: "QueryAllianceRedelegationsRequest"
    ) -> "QueryAllianceRedelegationsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def alliance(
        self, query_alliance_request: "QueryAllianceRequest"
    ) -> "QueryAllianceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_alliances(
        self,
        stream: "grpclib.server.Stream[QueryAlliancesRequest, QueryAlliancesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.alliances(request)
        await stream.send_message(response)

    async def __rpc_ibc_alliance(
        self,
        stream: "grpclib.server.Stream[QueryIbcAllianceRequest, QueryAllianceResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.ibc_alliance(request)
        await stream.send_message(response)

    async def __rpc_all_alliances_delegations(
        self,
        stream: "grpclib.server.Stream[QueryAllAlliancesDelegationsRequest, QueryAlliancesDelegationsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.all_alliances_delegations(request)
        await stream.send_message(response)

    async def __rpc_alliance_validator(
        self,
        stream: "grpclib.server.Stream[QueryAllianceValidatorRequest, QueryAllianceValidatorResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.alliance_validator(request)
        await stream.send_message(response)

    async def __rpc_all_alliance_validators(
        self,
        stream: "grpclib.server.Stream[QueryAllAllianceValidatorsRequest, QueryAllianceValidatorsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.all_alliance_validators(request)
        await stream.send_message(response)

    async def __rpc_alliances_delegation(
        self,
        stream: "grpclib.server.Stream[QueryAlliancesDelegationsRequest, QueryAlliancesDelegationsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.alliances_delegation(request)
        await stream.send_message(response)

    async def __rpc_alliances_delegation_by_validator(
        self,
        stream: "grpclib.server.Stream[QueryAlliancesDelegationByValidatorRequest, QueryAlliancesDelegationsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.alliances_delegation_by_validator(request)
        await stream.send_message(response)

    async def __rpc_alliance_delegation(
        self,
        stream: "grpclib.server.Stream[QueryAllianceDelegationRequest, QueryAllianceDelegationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.alliance_delegation(request)
        await stream.send_message(response)

    async def __rpc_ibc_alliance_delegation(
        self,
        stream: "grpclib.server.Stream[QueryIbcAllianceDelegationRequest, QueryAllianceDelegationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.ibc_alliance_delegation(request)
        await stream.send_message(response)

    async def __rpc_alliance_delegation_rewards(
        self,
        stream: "grpclib.server.Stream[QueryAllianceDelegationRewardsRequest, QueryAllianceDelegationRewardsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.alliance_delegation_rewards(request)
        await stream.send_message(response)

    async def __rpc_ibc_alliance_delegation_rewards(
        self,
        stream: "grpclib.server.Stream[QueryIbcAllianceDelegationRewardsRequest, QueryAllianceDelegationRewardsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.ibc_alliance_delegation_rewards(request)
        await stream.send_message(response)

    async def __rpc_alliance_unbondings_by_denom_and_delegator(
        self,
        stream: "grpclib.server.Stream[QueryAllianceUnbondingsByDenomAndDelegatorRequest, QueryAllianceUnbondingsByDenomAndDelegatorResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.alliance_unbondings_by_denom_and_delegator(request)
        await stream.send_message(response)

    async def __rpc_alliance_unbondings(
        self,
        stream: "grpclib.server.Stream[QueryAllianceUnbondingsRequest, QueryAllianceUnbondingsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.alliance_unbondings(request)
        await stream.send_message(response)

    async def __rpc_alliance_redelegations(
        self,
        stream: "grpclib.server.Stream[QueryAllianceRedelegationsRequest, QueryAllianceRedelegationsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.alliance_redelegations(request)
        await stream.send_message(response)

    async def __rpc_alliance(
        self,
        stream: "grpclib.server.Stream[QueryAllianceRequest, QueryAllianceResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.alliance(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/alliance.alliance.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/alliance.alliance.Query/Alliances": grpclib.const.Handler(
                self.__rpc_alliances,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAlliancesRequest,
                QueryAlliancesResponse,
            ),
            "/alliance.alliance.Query/IBCAlliance": grpclib.const.Handler(
                self.__rpc_ibc_alliance,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryIbcAllianceRequest,
                QueryAllianceResponse,
            ),
            "/alliance.alliance.Query/AllAlliancesDelegations": grpclib.const.Handler(
                self.__rpc_all_alliances_delegations,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllAlliancesDelegationsRequest,
                QueryAlliancesDelegationsResponse,
            ),
            "/alliance.alliance.Query/AllianceValidator": grpclib.const.Handler(
                self.__rpc_alliance_validator,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllianceValidatorRequest,
                QueryAllianceValidatorResponse,
            ),
            "/alliance.alliance.Query/AllAllianceValidators": grpclib.const.Handler(
                self.__rpc_all_alliance_validators,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllAllianceValidatorsRequest,
                QueryAllianceValidatorsResponse,
            ),
            "/alliance.alliance.Query/AlliancesDelegation": grpclib.const.Handler(
                self.__rpc_alliances_delegation,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAlliancesDelegationsRequest,
                QueryAlliancesDelegationsResponse,
            ),
            "/alliance.alliance.Query/AlliancesDelegationByValidator": grpclib.const.Handler(
                self.__rpc_alliances_delegation_by_validator,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAlliancesDelegationByValidatorRequest,
                QueryAlliancesDelegationsResponse,
            ),
            "/alliance.alliance.Query/AllianceDelegation": grpclib.const.Handler(
                self.__rpc_alliance_delegation,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllianceDelegationRequest,
                QueryAllianceDelegationResponse,
            ),
            "/alliance.alliance.Query/IBCAllianceDelegation": grpclib.const.Handler(
                self.__rpc_ibc_alliance_delegation,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryIbcAllianceDelegationRequest,
                QueryAllianceDelegationResponse,
            ),
            "/alliance.alliance.Query/AllianceDelegationRewards": grpclib.const.Handler(
                self.__rpc_alliance_delegation_rewards,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllianceDelegationRewardsRequest,
                QueryAllianceDelegationRewardsResponse,
            ),
            "/alliance.alliance.Query/IBCAllianceDelegationRewards": grpclib.const.Handler(
                self.__rpc_ibc_alliance_delegation_rewards,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryIbcAllianceDelegationRewardsRequest,
                QueryAllianceDelegationRewardsResponse,
            ),
            "/alliance.alliance.Query/AllianceUnbondingsByDenomAndDelegator": grpclib.const.Handler(
                self.__rpc_alliance_unbondings_by_denom_and_delegator,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllianceUnbondingsByDenomAndDelegatorRequest,
                QueryAllianceUnbondingsByDenomAndDelegatorResponse,
            ),
            "/alliance.alliance.Query/AllianceUnbondings": grpclib.const.Handler(
                self.__rpc_alliance_unbondings,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllianceUnbondingsRequest,
                QueryAllianceUnbondingsResponse,
            ),
            "/alliance.alliance.Query/AllianceRedelegations": grpclib.const.Handler(
                self.__rpc_alliance_redelegations,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllianceRedelegationsRequest,
                QueryAllianceRedelegationsResponse,
            ),
            "/alliance.alliance.Query/Alliance": grpclib.const.Handler(
                self.__rpc_alliance,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllianceRequest,
                QueryAllianceResponse,
            ),
        }
